{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jithu\\\\OneDrive\\\\Desktop\\\\mern-stack-authentication-boilerplate-main\\\\client\\\\src\\\\pages\\\\PasswordResetPage\\\\PasswordResetPage.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Form, Button, Spinner, Container } from \"react-bootstrap\";\nimport IMAGES from \"../../assets\";\nimport { Notify } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PasswordResetPage = () => {\n  _s();\n  const [credentials, setCredentials] = useState({\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPasswordReset, setIsPasswordReset] = useState(false);\n  const {\n    resetToken\n  } = useParams(); // Get \"resetToken\" from URL parameters\n\n  const handleCredentials = e => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value\n    });\n  };\n  const passwordResetHandler = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // If any field is missing\n    if (!credentials.password || !credentials.confirmPassword) {\n      setIsLoading(false);\n      return Notify(\"Please Fill all the Feilds\", \"warn\");\n    }\n\n    // If password and confirm password doesn't match\n    if (credentials.password !== credentials.confirmPassword) {\n      setIsLoading(false);\n      return Notify(\"Passwords Do Not Match\", \"warn\");\n    }\n\n    // If password is less than 8 characters\n    if (credentials.password.length < 8) {\n      setIsLoading(false);\n      return Notify(\"Password must be at least 8 characters\", \"warn\");\n    }\n    try {\n      const response = await fetch(`/api/auth/resetPassword/${resetToken}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          password: credentials.password\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setIsLoading(false);\n        setIsPasswordReset(true);\n        return Notify(data.data, \"success\");\n      } else {\n        setIsLoading(false);\n        return Notify(data.error, \"error\");\n      }\n    } catch (error) {\n      setIsLoading(false);\n      return Notify(\"Internal server error\", \"error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isPasswordReset ? /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: IMAGES.green_check,\n        className: \"mx-auto d-block mt-5 mb-3\",\n        width: \"100px\",\n        alt: \"password changed successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"email__heading text-center fs-2\",\n        children: \"Password Changed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-muted fs-5\",\n        children: \"Your password has been changed successfully.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      className: \"auth__form\",\n      onSubmit: passwordResetHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mb-3\",\n        children: \"Create new password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-muted mb-4\",\n        children: \"Your new password must be different from previous used passwords.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"New password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          name: \"password\",\n          tabIndex: \"1\",\n          placeholder: \"Enter new password\",\n          value: credentials.password,\n          onChange: e => handleCredentials(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"Must be at least 8 characters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"confirmPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          name: \"confirmPassword\",\n          tabIndex: \"2\",\n          placeholder: \"Confirm new password\",\n          value: credentials.confirmPassword,\n          onChange: e => handleCredentials(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"Both passwords must match.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        tabIndex: \"3\",\n        variant: \"success\",\n        type: \"submit\",\n        className: \"mb-3\",\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          size: \"sm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this) : \"Reset password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(PasswordResetPage, \"Lqz8qRMjfd0sPIFqmgfB63RzBEY=\", false, function () {\n  return [useParams];\n});\n_c = PasswordResetPage;\nexport default PasswordResetPage;\nvar _c;\n$RefreshReg$(_c, \"PasswordResetPage\");","map":{"version":3,"names":["useState","useParams","Form","Button","Spinner","Container","IMAGES","Notify","PasswordResetPage","credentials","setCredentials","password","confirmPassword","isLoading","setIsLoading","isPasswordReset","setIsPasswordReset","resetToken","handleCredentials","e","target","name","value","passwordResetHandler","preventDefault","length","response","fetch","method","headers","body","JSON","stringify","data","json","success","error","green_check"],"sources":["C:/Users/jithu/OneDrive/Desktop/mern-stack-authentication-boilerplate-main/client/src/pages/PasswordResetPage/PasswordResetPage.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Form, Button, Spinner, Container } from \"react-bootstrap\";\n\nimport IMAGES from \"../../assets\";\nimport { Notify } from \"../../utils\";\n\nconst PasswordResetPage = () => {\n  const [credentials, setCredentials] = useState({\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPasswordReset, setIsPasswordReset] = useState(false);\n\n  const { resetToken } = useParams(); // Get \"resetToken\" from URL parameters\n\n  const handleCredentials = (e) => {\n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\n  };\n\n  const passwordResetHandler = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // If any field is missing\n    if (!credentials.password || !credentials.confirmPassword) {\n      setIsLoading(false);\n      return Notify(\"Please Fill all the Feilds\", \"warn\");\n    }\n\n    // If password and confirm password doesn't match\n    if (credentials.password !== credentials.confirmPassword) {\n      setIsLoading(false);\n      return Notify(\"Passwords Do Not Match\", \"warn\");\n    }\n\n    // If password is less than 8 characters\n    if (credentials.password.length < 8) {\n      setIsLoading(false);\n      return Notify(\"Password must be at least 8 characters\", \"warn\");\n    }\n\n    try {\n      const response = await fetch(`/api/auth/resetPassword/${resetToken}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          password: credentials.password,\n        }),\n      });\n      const data = await response.json();\n\n      if (data.success) {\n        setIsLoading(false);\n        setIsPasswordReset(true);\n        return Notify(data.data, \"success\");\n      } else {\n        setIsLoading(false);\n        return Notify(data.error, \"error\");\n      }\n    } catch (error) {\n      setIsLoading(false);\n      return Notify(\"Internal server error\", \"error\");\n    }\n  };\n\n  return (\n    <>\n      {isPasswordReset ? (\n        <Container>\n          <img\n            src={IMAGES.green_check}\n            className=\"mx-auto d-block mt-5 mb-3\"\n            width=\"100px\"\n            alt=\"password changed successfully\"\n          />\n\n          <p className=\"email__heading text-center fs-2\">Password Changed!</p>\n          <p className=\"text-center text-muted fs-5\">\n            Your password has been changed successfully.\n          </p>\n        </Container>\n      ) : (\n        <Form className=\"auth__form\" onSubmit={passwordResetHandler}>\n          <h4 className=\"mb-3\">Create new password</h4>\n          <p className=\"text-muted mb-4\">\n            Your new password must be different from previous used passwords.\n          </p>\n\n          <Form.Group className=\"mb-3\" controlId=\"password\">\n            <Form.Label>New password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              tabIndex=\"1\"\n              placeholder=\"Enter new password\"\n              value={credentials.password}\n              onChange={(e) => handleCredentials(e)}\n            />\n            <Form.Text className=\"text-muted\">\n              Must be at least 8 characters.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"confirmPassword\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              tabIndex=\"2\"\n              placeholder=\"Confirm new password\"\n              value={credentials.confirmPassword}\n              onChange={(e) => handleCredentials(e)}\n            />\n            <Form.Text className=\"text-muted\">\n              Both passwords must match.\n            </Form.Text>\n          </Form.Group>\n\n          <Button\n            tabIndex=\"3\"\n            variant=\"success\"\n            type=\"submit\"\n            className=\"mb-3\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n            ) : (\n              \"Reset password\"\n            )}\n          </Button>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default PasswordResetPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}